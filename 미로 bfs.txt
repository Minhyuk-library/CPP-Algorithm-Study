#include <iostream>
#include <string>
#include <queue>
#include <vector>

using namespace std;

int dx[4] = { 1, -1,  0,  0};
int dy[4] = { 0,  0,  1, -1};

int N, M;
vector<vector<int>> maze;

bool isValid(int x, int y) {
    return x >= 0 && y >= 0 && x < N && y < M;
}

int bfs(int x, int y) {
    vector<vector<int>> dist(N, vector<int>(M, 0));
    queue<pair<int,int>> q;
    q.push({x, y});
    dist[x][y] = 1;

    while(!q.empty()) {
        int cx = q.front().first;
        int cy = q.front().second;
        q.pop();

        if (cx == N - 1 && cy == M - 1) {
            return dist[cx][cy];
        }

        for (int i = 0; i < 4; ++i) {
            int nx = cx + dx[i];
            int ny = cy + dy[i];

            if (isValid(nx, ny) && maze[nx][ny] == 1 && dist[nx][ny] == 0) {
                dist[nx][ny] = dist[cx][cy] + 1;
                q.push({nx, ny});
            }
        }
    }

    return -1; // 도착 불가능한 경우
}

int main() {
    cin >> N >> M;
    maze.assign(N, vector<int> (M, 0));
    
    string tmp;
    for (int i = 0; i < N; ++i) {
        cin >> tmp;
        for (int j = 0; j < M; ++j) {
            maze[i][j] = tmp[j] - '0';
        }
    }

    cout << bfs(0, 0) << endl;
    return 0;
}
